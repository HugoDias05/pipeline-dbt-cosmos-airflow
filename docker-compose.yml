version: '3'

x-airflow-common:
  &airflow-common
  # usamos build em vez de image, para compilar a imagem com dbt + Cosmos + BigQuery
  build:
    context: .
    dockerfile: docker/Dockerfile

  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session'
    AIRFLOW__SECRETS__BACKEND: airflow.secrets.local_filesystem.LocalFilesystemBackend
    AIRFLOW__SECRETS__BACKEND_KWARGS: '{"variables_file_path": "/opt/secrets/variables.yaml", "connections_file_path": "/opt/secrets/connections.yaml"}'
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 60


    # --- Novas vari√°veis de ambiente para dbt/Cosmos/BigQuery ---
    DBT_PROFILES_DIR: /opt/airflow/dags/dbt
    GOOGLE_APPLICATION_CREDENTIALS: /opt/secrets/gcp-sa.json
    GCP_PROJECT_ID: ${GCP_PROJECT_ID}
    BIGQUERY_DATASET: ${BIGQUERY_DATASET}
    BIGQUERY_LOCATION: ${BIGQUERY_LOCATION}
    # ------------------------------------------------------------

  volumes:
    - ${AIRFLOW_DAGS}:/opt/airflow/dags
    - ${AIRFLOW_LOGS}:/opt/airflow/logs
    - ${AIRFLOW_PLUGINS}:/opt/airflow/plugins
    - ${AIRFLOW_SECRETS}:/opt/secrets
    - ./data:/opt/airflow/data   # <--- novo volume para ler o CSV fora de dags/

  networks:
    - airflow
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  postgres:
    image: postgres:13
    networks:
      - airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 60

    user: "0:0"
    volumes:
      - .:/sources

networks:
  airflow:

volumes:
  postgres-db-volume:
